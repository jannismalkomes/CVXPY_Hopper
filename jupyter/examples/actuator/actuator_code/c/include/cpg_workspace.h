
/*
Auto-generated by CVXPYgen on September 18, 2025 at 16:02:00.
Content: Type definitions and variable declarations.
*/

#include "scs.h"

#ifndef CPG_TYPES_H
# define CPG_TYPES_H

typedef scs_float cpg_float;
typedef scs_int cpg_int;

// Compressed sparse column matrix
typedef struct {
  cpg_int      *p;
  cpg_int      *i;
  cpg_float    *x;
  cpg_int      nnz;
} cpg_csc;

// Canonical parameters
typedef struct {
  cpg_csc      *P;         // Canonical parameter P
  cpg_float    *c;         // Canonical parameter c
  cpg_float    d;          // Canonical parameter d
  cpg_csc      *A;         // Canonical parameter A
  cpg_float    *b;         // Canonical parameter b
} Canon_Params_t;

// Flags indicating outdated canonical parameters
typedef struct {
  int        P;            // Bool, if canonical parameter P outdated
  int        c;            // Bool, if canonical parameter c outdated
  int        d;            // Bool, if canonical parameter d outdated
  int        A;            // Bool, if canonical parameter A outdated
  int        b;            // Bool, if canonical parameter b outdated
} Canon_Outdated_t;

// Primal solution
typedef struct {
  cpg_float    *u;         // Your variable u
  cpg_float    *delta_u;   // Your variable delta_u
} CPG_Prim_t;

// Dual solution
typedef struct {
  cpg_float    *d0;        // Your dual variable for constraint d0
  cpg_float    *d1;        // Your dual variable for constraint d1
  cpg_float    *d2;        // Your dual variable for constraint d2
} CPG_Dual_t;

// Solver information
typedef struct {
  cpg_float    obj_val;    // Objective function value
  cpg_int      iter;       // Number of iterations
  char         *status;    // Solver status
  cpg_float    pri_res;    // Primal residual
  cpg_float    dua_res;    // Dual residual
} CPG_Info_t;

// Solution and solver information
typedef struct {
  CPG_Prim_t *prim;        // Primal solution
  CPG_Dual_t *dual;        // Dual solution
  CPG_Info_t *info;        // Solver info
} CPG_Result_t;

// Parameter deltas
typedef struct {
  cpg_float    *lamb_sm;   // Delta of your parameter lamb_sm
  cpg_float    *kappa;     // Delta of your parameter kappa
  cpg_float    *A;         // Delta of your parameter A
  cpg_float    *w;         // Delta of your parameter w
  cpg_float    *u_min;     // Delta of your parameter u_min
  cpg_float    *u_max;     // Delta of your parameter u_max
  cpg_float    *u_prev;    // Delta of your parameter u_prev
} CPG_Delta_t;

#endif // ifndef CPG_TYPES_H

// Vector containing flattened user-defined parameters
extern cpg_float cpg_params_vec[61];

// Sparse mappings from user-defined to canonical parameters
extern cpg_csc canon_P_map;
extern cpg_csc canon_c_map;
extern cpg_csc canon_A_map;
extern cpg_csc canon_b_map;

// Canonical parameters
extern cpg_csc canon_P;
extern cpg_float canon_c[27];
extern cpg_csc canon_A;
extern cpg_float canon_b[43];

// Struct containing canonical parameters
extern Canon_Params_t Canon_Params;

// Struct containing flags for outdated canonical parameters
extern Canon_Outdated_t Canon_Outdated;

// Struct containing primal solution
extern CPG_Prim_t CPG_Prim;

// Struct containing dual solution
extern CPG_Dual_t CPG_Dual;

// Struct containing solver info
extern CPG_Info_t CPG_Info;

// Struct containing solution and info
extern CPG_Result_t CPG_Result;

// SCS matrix P
extern ScsMatrix scs_P;

// SCS matrix A
extern ScsMatrix scs_A;

// Struct containing SCS data
extern ScsData Scs_D;

// Struct containing SCS cone data
extern ScsCone Scs_K;

// Struct containing SCS settings
extern ScsSettings Canon_Settings;

// SCS solution
extern cpg_float scs_x[27];
extern cpg_float scs_y[43];
extern cpg_float scs_s[43];

// Struct containing SCS solution
extern ScsSolution Scs_Sol;

// Struct containing SCS information
extern ScsInfo Scs_Info;

// Pointer to struct containing SCS workspace
extern ScsWork* Scs_Work;
