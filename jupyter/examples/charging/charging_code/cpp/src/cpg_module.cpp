
/*
Auto-generated by CVXPYgen on September 18, 2025 at 15:51:45.
Content: Python binding with pybind11.
*/

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <ctime>
#include <chrono>
#include "cpg_module.hpp"

extern "C" {
    #include "include/cpg_workspace.h"
    #include "include/cpg_solve.h"
}

namespace py = pybind11;

static int i;

CPG_Result_cpp_t solve_cpp(struct CPG_Updated_cpp_t& CPG_Updated_cpp, struct CPG_Params_cpp_t& CPG_Params_cpp){

    // Pass changed user-defined parameter values to the solver
    if (CPG_Updated_cpp.p) {
        for(i=0; i<1440; i++) {
            cpg_update_p(i, CPG_Params_cpp.p[i]);
        }
    }
    if (CPG_Updated_cpp.s) {
        for(i=0; i<1440; i++) {
            cpg_update_s(i, CPG_Params_cpp.s[i]);
        }
    }
    if (CPG_Updated_cpp.gamma) {
        cpg_update_gamma(CPG_Params_cpp.gamma);
    }
    if (CPG_Updated_cpp.D) {
        cpg_update_D(CPG_Params_cpp.D);
    }
    if (CPG_Updated_cpp.C) {
        cpg_update_C(CPG_Params_cpp.C);
    }
    if (CPG_Updated_cpp.Q) {
        cpg_update_Q(CPG_Params_cpp.Q);
    }

    // Solve
    auto ASA_start = std::chrono::high_resolution_clock::now();
    cpg_solve();
    auto ASA_end = std::chrono::high_resolution_clock::now();

    // Arrange and return results
    CPG_Prim_cpp_t CPG_Prim_cpp {};
    for(i=0; i<1440; i++) {
        CPG_Prim_cpp.u[i] = CPG_Prim.u[i];
    }
    for(i=0; i<1441; i++) {
        CPG_Prim_cpp.q[i] = CPG_Prim.q[i];
    }
    CPG_Dual_cpp_t CPG_Dual_cpp {};
    for(i=0; i<1440; i++) {
        CPG_Dual_cpp.d0[i] = CPG_Dual.d0[i];
    }
    for(i=0; i<1440; i++) {
        CPG_Dual_cpp.d1[i] = CPG_Dual.d1[i];
    }
    for(i=0; i<1440; i++) {
        CPG_Dual_cpp.d2[i] = CPG_Dual.d2[i];
    }
    for(i=0; i<1441; i++) {
        CPG_Dual_cpp.d3[i] = CPG_Dual.d3[i];
    }
    for(i=0; i<1441; i++) {
        CPG_Dual_cpp.d4[i] = CPG_Dual.d4[i];
    }
    CPG_Dual_cpp.d5 = CPG_Dual.d5;
    CPG_Dual_cpp.d6 = CPG_Dual.d6;
    CPG_Info_cpp_t CPG_Info_cpp {};
    CPG_Info_cpp.obj_val = CPG_Info.obj_val;
    CPG_Info_cpp.iter = CPG_Info.iter;
    CPG_Info_cpp.status = CPG_Info.status;
    CPG_Info_cpp.pri_res = CPG_Info.pri_res;
    CPG_Info_cpp.dua_res = CPG_Info.dua_res;
    std::chrono::duration<double> elapsed = ASA_end - ASA_start;
    CPG_Info_cpp.time = elapsed.count();
    CPG_Result_cpp_t CPG_Result_cpp {};
    CPG_Result_cpp.prim = CPG_Prim_cpp;
    CPG_Result_cpp.dual = CPG_Dual_cpp;
    CPG_Result_cpp.info = CPG_Info_cpp;
    return CPG_Result_cpp;

}

PYBIND11_MODULE(cpg_module, m) {

    py::class_<CPG_Params_cpp_t>(m, "cpg_params")
            .def(py::init<>())
            .def_readwrite("p", &CPG_Params_cpp_t::p)
            .def_readwrite("s", &CPG_Params_cpp_t::s)
            .def_readwrite("gamma", &CPG_Params_cpp_t::gamma)
            .def_readwrite("D", &CPG_Params_cpp_t::D)
            .def_readwrite("C", &CPG_Params_cpp_t::C)
            .def_readwrite("Q", &CPG_Params_cpp_t::Q)
            ;

    py::class_<CPG_Updated_cpp_t>(m, "cpg_updated")
            .def(py::init<>())
            .def_readwrite("p", &CPG_Updated_cpp_t::p)
            .def_readwrite("s", &CPG_Updated_cpp_t::s)
            .def_readwrite("gamma", &CPG_Updated_cpp_t::gamma)
            .def_readwrite("D", &CPG_Updated_cpp_t::D)
            .def_readwrite("C", &CPG_Updated_cpp_t::C)
            .def_readwrite("Q", &CPG_Updated_cpp_t::Q)
            ;

    py::class_<CPG_Prim_cpp_t>(m, "cpg_prim")
            .def(py::init<>())
            .def_readwrite("u", &CPG_Prim_cpp_t::u)
            .def_readwrite("q", &CPG_Prim_cpp_t::q)
            ;

    py::class_<CPG_Dual_cpp_t>(m, "cpg_dual")
            .def(py::init<>())
            .def_readwrite("d0", &CPG_Dual_cpp_t::d0)
            .def_readwrite("d1", &CPG_Dual_cpp_t::d1)
            .def_readwrite("d2", &CPG_Dual_cpp_t::d2)
            .def_readwrite("d3", &CPG_Dual_cpp_t::d3)
            .def_readwrite("d4", &CPG_Dual_cpp_t::d4)
            .def_readwrite("d5", &CPG_Dual_cpp_t::d5)
            .def_readwrite("d6", &CPG_Dual_cpp_t::d6)
            ;

    py::class_<CPG_Info_cpp_t>(m, "cpg_info")
            .def(py::init<>())
            .def_readwrite("obj_val", &CPG_Info_cpp_t::obj_val)
            .def_readwrite("iter", &CPG_Info_cpp_t::iter)
            .def_readwrite("status", &CPG_Info_cpp_t::status)
            .def_readwrite("pri_res", &CPG_Info_cpp_t::pri_res)
            .def_readwrite("dua_res", &CPG_Info_cpp_t::dua_res)
            .def_readwrite("time", &CPG_Info_cpp_t::time)
            ;

    py::class_<CPG_Result_cpp_t>(m, "cpg_result")
            .def(py::init<>())
            .def_readwrite("cpg_prim", &CPG_Result_cpp_t::prim)
            .def_readwrite("cpg_dual", &CPG_Result_cpp_t::dual)
            .def_readwrite("cpg_info", &CPG_Result_cpp_t::info)
            ;

    m.def("solve", &solve_cpp);

    m.def("set_solver_default_settings", &cpg_set_solver_default_settings);
    m.def("set_solver_feastol", &cpg_set_solver_feastol);
    m.def("set_solver_abstol", &cpg_set_solver_abstol);
    m.def("set_solver_reltol", &cpg_set_solver_reltol);
    m.def("set_solver_feastol_inacc", &cpg_set_solver_feastol_inacc);
    m.def("set_solver_abstol_inacc", &cpg_set_solver_abstol_inacc);
    m.def("set_solver_reltol_inacc", &cpg_set_solver_reltol_inacc);
    m.def("set_solver_maxit", &cpg_set_solver_maxit);

}
